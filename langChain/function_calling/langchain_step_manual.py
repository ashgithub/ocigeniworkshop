import json
from langchain_oci.chat_models import ChatOCIGenAI
from langchain_core.tools import tool
from langchain_core.messages import HumanMessage

# How to build tools: https://python.langchain.com/docs/how_to/custom_tools/
# NEW langchain version: https://docs.langchain.com/oss/python/langchain/agents
# Version not compatible with langchain_oci current version 0.1.5

@tool
def get_weather(city:str) -> str:
    """ Gets the weather for a given city """
    return f"The weather in {city} is 70 Fahrenheit"

@tool
def get_projection_bill(current_bill:int, gas_oven:bool) -> int:
    """ Returns the projected bill for a user depending on the current one and if it has or not oven """
    if gas_oven:
        return current_bill + 45
    return current_bill + 4

tools = [get_weather,get_projection_bill]

#####
#make sure your sandbox.json file is setup for your environment. You might have to specify the full path depending on  your `cwd` 
#####
SANDBOX_CONFIG_FILE = "sandbox.json"

LLM_MODEL = "cohere.command-r-08-2024"

# available models : https://docs.oracle.com/en-us/iaas/Content/generative-ai/chat-models.htm
# cohere.command-a-03-2025
# cohere.command-r-08-2024
# meta.llama-3.1-405b-instruct
# meta.llama-3.3-70b-instruct
# openai.gpt-4.1
# openai.gpt-4o
# xai.grok-4
# xai.grok-3

llm_service_endpoint= "https://inference.generativeai.us-chicago-1.oci.oraclecloud.com"

def load_config(config_path):
    """Load configuration from a JSON file."""
    try:
        with open(config_path, 'r') as f:
                return json.load(f)
    except FileNotFoundError:
        print(f"Error: Configuration file '{config_path}' not found.")
        return None
    except json.JSONDecodeError as e:
        print(f"Error: Invalid JSON in configuration file '{config_path}': {e}")
        return None

# Step 1: Load the config file
scfg = load_config(SANDBOX_CONFIG_FILE)

# Step 2: create a LLM client using the credentials and optional parameters
llm_client = ChatOCIGenAI(
    model_id= LLM_MODEL,
    service_endpoint= llm_service_endpoint,
    compartment_id= scfg['oci']['compartment'],
    auth_file_location= scfg["oci"]["configFile"],
    auth_profile= scfg["oci"]["profile"],
    model_kwargs={
        "temperature":0.7,
        "max_tokens": 500,
        # "preamble_override": PREAMBLE, # Not supported by openai / grok / meta models
        "is_stream": False,
        "seed": 7555,
        "top_p": 0.7,
        "top_k": 1, # Different from 0 for meta models
        # "frequency_penalty": 0.0 # Not supported by openai / grok models
    }
)

# Give some simple human message to the context list
messages = [HumanMessage("How is the weather in San Francisco?")]

# Step 3: Bind the current tools to the model
llm_client_with_tools = llm_client.bind_tools(tools)

# Step 4: First model invokation to gather the necessary tool calls
ai_message = llm_client_with_tools.invoke(messages)
print(f"**************************Tool arguments for calling the function generated by model **************************") 
print(ai_message.tool_calls)

# Append the tool calls and messages to the list for context
messages.append(ai_message)

# Step 5: For each tool call in the AI message list, call the tool, receive the response and append the response to the context
for tool_call in ai_message.tool_calls:
    selected_tool = {"get_weather": get_weather, "get_projection_bill": get_projection_bill}[tool_call["name"].lower()]
    tool_msg = selected_tool.invoke(tool_call)
    print(f"**************************Tool call result with AI arguments **************************")
    print(tool_msg)
    messages.append(tool_msg)

# Step 6: Call the agent again with the latest context including the tool call response
print(f"**************************Final Model invoke with the Tool response **************************") 
final_response = llm_client_with_tools.invoke(messages)
print(f"Model Final response:\n{final_response.content}")
print(f"Model Full response:\n{final_response}")